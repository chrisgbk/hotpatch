-- usage: place into mod you want to package, execute lua, check output.txt

--this is terrible hacked together coding, don't be surprised if it fails
local seperator = (package.config:sub(1,1))
local base = (arg[1] or '.'):gsub(seperator .. '$', '')
local gsub_base = (base .. seperator):gsub('([%.%-])', '%%%1')
local isWin = seperator == '\\'
local getSubfolders
local getFiles

if isWin then
    local function dir(args)
        local file = io.popen ('dir' .. args) or ''
        local t = {}
        for line in file:lines() do 
            t[#t + 1] = line
        end
        file:close()
        return t
    end

    function getSubfolders(directory)
        return dir(' "' .. directory .. '" /b /a:d')
    end

    function getFiles(directory, mask)
        directory = directory or base
        mask = mask or ''
        return dir(' "' .. directory .. '\\' .. mask .. '" /b /a:-d')
    end
else
--this is not tested yet, might not work ¯\_(ツ)_/¯
    local function ls(args)
        local file = io.popen ('ls' .. args) or ''
        local t = {}
        for line in file:lines() do 
            t[#t + 1] = line
        end
        file:close()
        return t
    end
    
    function getSubfolders(directory)
        directory = directory or base
        local t = ls(directory .. ' -F')
        local r = {}
        for k, v in ipairs(t) do
            if v:sub(-1) == '/' then
                table.insert(r, v:gsub('/', ''))
            end
        end
        return table.sort(r)
    end

    function getFiles(directory, mask)
        directory = directory or base
        mask = mask or ''
        local t = ls(directory .. '/' .. mask .. ' -F')
        local r = {}
        for k, v in ipairs(t) do
            if v:sub(-1) ~= '/' then
                table.insert(r, v)
            end
        end
        return table.sort(r)
    end
end

local output = io.open('output.script', 'w+')
output:setvbuf('no')
local control_code

local function escape(s)
    return (s:gsub('(\\)', '\\%1'))
end

local nfiles, nfolders = 0, 0
local parse
parse = function(directory)
    directory = directory or base
    local dirs = getSubfolders(directory)
    local v
    local cur_path = ((directory and (directory .. seperator)) or '')
    for k = 1, #dirs do
        nfolders = nfolders + 1
        v = dirs[k]
        local path = cur_path .. v
        
        parse(path)
    end
    print(cur_path .. '*.lua')
    local files = getFiles(directory, '*.lua')
    for k = 1, #files do
        nfiles = nfiles + 1
        v = files[k]
        local path = cur_path .. v
        print(path)
        local file = io.open(path)
        local code = file:read('a')
        --code = escape(code)
        --code = code:gsub('(.-\n)', '  %1') -- pretty printing
		local file_name = path:gsub(gsub_base, ''):gsub('\\','/'):gsub('%.lua', '')
        if file_name:match('^control$') then
            control_code = code
        else
			output:write('hotpatch_files["' .. file_name .. '"] = [===[\n')
			output:write(code)
			output:write(']===]\n')
		end
		file:close()
    end

end

print('Packager tool')

output:write('local hotpatch_files = {}\n')
parse()

output:write('local hotpatch_code = [===[')
output:write(control_code)
output:write(']===]\n')
local cd = io.popen"cd":read'*l'
local mod_name, mod_version = cd:match(seperator .. '([^' .. seperator ..']-)_(%d*%.%d*%.%d*)%-?.*$')
if not mod_name then 
    mod_name = cd:match(seperator .. '([^' .. seperator ..']-)$')
    mod_version = '1.0.0'
end
output:write('local hotpatch_tools = require "hotpatch.core"\n')
output:write('hotpatch_tools.static_mod("' .. mod_name.. '", "' .. mod_version .. '", hotpatch_code, hotpatch_files)')
output:flush()
output:close()

print('')
print('Packaging ' .. mod_name .. ' complete.')
print('Processed ' .. nfolders .. ' folders containing ' .. nfiles .. ' files.')
print('See output.script')